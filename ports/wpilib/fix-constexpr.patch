From 2a03aa711b2dc1ef68c80a0076a870a972689bd3 Mon Sep 17 00:00:00 2001
From: Adrien Bourdeaux <bourdeaux.adrien@gmail.com>
Date: Wed, 9 Apr 2025 19:02:57 -0400
Subject: [PATCH] fix eigen constexpr

---
 wpimath/src/main/native/include/frc/geometry/Pose2d.h       | 2 +-
 wpimath/src/main/native/include/frc/geometry/Pose3d.h       | 4 ++--
 wpimath/src/main/native/include/frc/geometry/Quaternion.h   | 2 +-
 wpimath/src/main/native/include/frc/geometry/Rotation2d.h   | 2 +-
 wpimath/src/main/native/include/frc/geometry/Rotation3d.h   | 6 +++---
 wpimath/src/main/native/include/frc/geometry/Transform2d.h  | 2 +-
 wpimath/src/main/native/include/frc/geometry/Transform3d.h  | 2 +-
 .../src/main/native/include/frc/geometry/Translation2d.h    | 2 +-
 .../src/main/native/include/frc/geometry/Translation3d.h    | 2 +-
 9 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/wpimath/src/main/native/include/frc/geometry/Pose2d.h b/wpimath/src/main/native/include/frc/geometry/Pose2d.h
index 2d8825caa..de6d5c9d2 100644
--- a/wpimath/src/main/native/include/frc/geometry/Pose2d.h
+++ b/wpimath/src/main/native/include/frc/geometry/Pose2d.h
@@ -233,7 +233,7 @@ class WPILIB_DLLEXPORT Pose2d {
   /**
    * Returns an affine transformation matrix representation of this pose.
    */
-  constexpr Eigen::Matrix3d ToMatrix() const {
+  Eigen::Matrix3d ToMatrix() const {
     auto vec = m_translation.ToVector();
     auto mat = m_rotation.ToMatrix();
     return Eigen::Matrix3d{{mat(0, 0), mat(0, 1), vec(0)},
diff --git a/wpimath/src/main/native/include/frc/geometry/Pose3d.h b/wpimath/src/main/native/include/frc/geometry/Pose3d.h
index 110faf735..a1b800cf3 100644
--- a/wpimath/src/main/native/include/frc/geometry/Pose3d.h
+++ b/wpimath/src/main/native/include/frc/geometry/Pose3d.h
@@ -254,7 +254,7 @@ class WPILIB_DLLEXPORT Pose3d {
   /**
    * Returns an affine transformation matrix representation of this pose.
    */
-  constexpr Eigen::Matrix4d ToMatrix() const {
+  Eigen::Matrix4d ToMatrix() const {
     auto vec = m_translation.ToVector();
     auto mat = m_rotation.ToMatrix();
     return Eigen::Matrix4d{{mat(0, 0), mat(0, 1), mat(0, 2), vec(0)},
@@ -320,7 +320,7 @@ constexpr ct_matrix3d RotationVectorToMatrix(const ct_vector3d& rotation) {
  * @param rotation The rotation vector.
  * @return The rotation vector as a 3x3 rotation matrix.
  */
-constexpr Eigen::Matrix3d RotationVectorToMatrix(
+  Eigen::Matrix3d RotationVectorToMatrix(
     const Eigen::Vector3d& rotation) {
   // Given a rotation vector <a, b, c>,
   //         [ 0 -c  b]
diff --git a/wpimath/src/main/native/include/frc/geometry/Quaternion.h b/wpimath/src/main/native/include/frc/geometry/Quaternion.h
index 65c6a8265..e02e02c61 100644
--- a/wpimath/src/main/native/include/frc/geometry/Quaternion.h
+++ b/wpimath/src/main/native/include/frc/geometry/Quaternion.h
@@ -263,7 +263,7 @@ class WPILIB_DLLEXPORT Quaternion {
    *
    * This is also the log operator of SO(3).
    */
-  constexpr Eigen::Vector3d ToRotationVector() const {
+  Eigen::Vector3d ToRotationVector() const {
     // See equation (31) in "Integrating Generic Sensor Fusion Algorithms with
     // Sound State Representation through Encapsulation of Manifolds"
     //
diff --git a/wpimath/src/main/native/include/frc/geometry/Rotation2d.h b/wpimath/src/main/native/include/frc/geometry/Rotation2d.h
index 82d9e39d7..6f769cb92 100644
--- a/wpimath/src/main/native/include/frc/geometry/Rotation2d.h
+++ b/wpimath/src/main/native/include/frc/geometry/Rotation2d.h
@@ -201,7 +201,7 @@ class WPILIB_DLLEXPORT Rotation2d {
   /**
    * Returns matrix representation of this rotation.
    */
-  constexpr Eigen::Matrix2d ToMatrix() const {
+  Eigen::Matrix2d ToMatrix() const {
     // R = [cosθ  −sinθ]
     //     [sinθ   cosθ]
     return Eigen::Matrix2d{{m_cos, -m_sin}, {m_sin, m_cos}};
diff --git a/wpimath/src/main/native/include/frc/geometry/Rotation3d.h b/wpimath/src/main/native/include/frc/geometry/Rotation3d.h
index 8d1e97529..0de491d33 100644
--- a/wpimath/src/main/native/include/frc/geometry/Rotation3d.h
+++ b/wpimath/src/main/native/include/frc/geometry/Rotation3d.h
@@ -389,7 +389,7 @@ class WPILIB_DLLEXPORT Rotation3d {
   /**
    * Returns the axis in the axis-angle representation of this rotation.
    */
-  constexpr Eigen::Vector3d Axis() const {
+  Eigen::Vector3d Axis() const {
     double norm = gcem::hypot(m_q.X(), m_q.Y(), m_q.Z());
     if (norm == 0.0) {
       return Eigen::Vector3d{{0.0, 0.0, 0.0}};
@@ -409,7 +409,7 @@ class WPILIB_DLLEXPORT Rotation3d {
   /**
    * Returns rotation matrix representation of this rotation.
    */
-  constexpr Eigen::Matrix3d ToMatrix() const {
+  Eigen::Matrix3d ToMatrix() const {
     double w = m_q.W();
     double x = m_q.X();
     double y = m_q.Y();
@@ -429,7 +429,7 @@ class WPILIB_DLLEXPORT Rotation3d {
    *
    * @return Rotation vector representation of this rotation.
    */
-  constexpr Eigen::Vector3d ToVector() const { return m_q.ToRotationVector(); }
+  Eigen::Vector3d ToVector() const { return m_q.ToRotationVector(); }
 
   /**
    * Returns a Rotation2d representing this Rotation3d projected into the X-Y
diff --git a/wpimath/src/main/native/include/frc/geometry/Transform2d.h b/wpimath/src/main/native/include/frc/geometry/Transform2d.h
index 88c00550d..a4b857f3b 100644
--- a/wpimath/src/main/native/include/frc/geometry/Transform2d.h
+++ b/wpimath/src/main/native/include/frc/geometry/Transform2d.h
@@ -94,7 +94,7 @@ class WPILIB_DLLEXPORT Transform2d {
    * Returns an affine transformation matrix representation of this
    * transformation.
    */
-  constexpr Eigen::Matrix3d ToMatrix() const {
+  Eigen::Matrix3d ToMatrix() const {
     auto vec = m_translation.ToVector();
     auto mat = m_rotation.ToMatrix();
     return Eigen::Matrix3d{{mat(0, 0), mat(0, 1), vec(0)},
diff --git a/wpimath/src/main/native/include/frc/geometry/Transform3d.h b/wpimath/src/main/native/include/frc/geometry/Transform3d.h
index bd6ca9c41..4664d9644 100644
--- a/wpimath/src/main/native/include/frc/geometry/Transform3d.h
+++ b/wpimath/src/main/native/include/frc/geometry/Transform3d.h
@@ -118,7 +118,7 @@ class WPILIB_DLLEXPORT Transform3d {
    * Returns an affine transformation matrix representation of this
    * transformation.
    */
-  constexpr Eigen::Matrix4d ToMatrix() const {
+  Eigen::Matrix4d ToMatrix() const {
     auto vec = m_translation.ToVector();
     auto mat = m_rotation.ToMatrix();
     return Eigen::Matrix4d{{mat(0, 0), mat(0, 1), mat(0, 2), vec(0)},
diff --git a/wpimath/src/main/native/include/frc/geometry/Translation2d.h b/wpimath/src/main/native/include/frc/geometry/Translation2d.h
index aa6c4753e..9442df186 100644
--- a/wpimath/src/main/native/include/frc/geometry/Translation2d.h
+++ b/wpimath/src/main/native/include/frc/geometry/Translation2d.h
@@ -94,7 +94,7 @@ class WPILIB_DLLEXPORT Translation2d {
    *
    * @return A 2D translation vector representation of this translation.
    */
-  constexpr Eigen::Vector2d ToVector() const {
+  Eigen::Vector2d ToVector() const {
     return Eigen::Vector2d{{m_x.value(), m_y.value()}};
   }
 
diff --git a/wpimath/src/main/native/include/frc/geometry/Translation3d.h b/wpimath/src/main/native/include/frc/geometry/Translation3d.h
index 72e220f08..19abe024f 100644
--- a/wpimath/src/main/native/include/frc/geometry/Translation3d.h
+++ b/wpimath/src/main/native/include/frc/geometry/Translation3d.h
@@ -118,7 +118,7 @@ class WPILIB_DLLEXPORT Translation3d {
    *
    * @return A 3D translation vector representation of this translation.
    */
-  constexpr Eigen::Vector3d ToVector() const {
+  Eigen::Vector3d ToVector() const {
     return Eigen::Vector3d{{m_x.value(), m_y.value(), m_z.value()}};
   }
 
-- 
2.47.1.windows.2

